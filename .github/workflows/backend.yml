name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/backend/**'
      - 'packages/contracts/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'apps/backend/**'
      - 'packages/contracts/**'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: chatbot_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('apps/backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      working-directory: apps/backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Set up environment variables
      working-directory: apps/backend
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/chatbot_test" >> .env
        echo "SECRET_KEY=test-secret-key-for-ci" >> .env
        echo "GROQ_API_KEY=test-groq-key" >> .env
    
    - name: Run database migrations
      working-directory: apps/backend
      run: |
        python -c "from database import init_db; init_db()"
    
    - name: Run tests
      working-directory: apps/backend
      run: |
        python -m pytest test_*.py -v
    
    - name: Run linting
      working-directory: apps/backend
      run: |
        pip install flake8 black isort
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check .
        isort --check-only .

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      working-directory: apps/backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Build Docker image
      run: |
        docker build -t chatbot-backend:latest -f apps/backend/Dockerfile .
    
    - name: Run security scan
      run: |
        pip install safety
        safety check -r apps/backend/requirements.txt

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying backend to production..."
        # Add your deployment commands here
        # Example: kubectl apply -f k8s/backend/
        # Example: docker push your-registry/chatbot-backend:latest
