openapi: 3.0.3
info:
  title: Chatbot API
  description: FastAPI backend for the chatbot application with authentication, chat, and admin features
  version: 1.0.0
  contact:
    name: Chatbot Team
    email: contact@example.com

servers:
  - url: http://localhost:8000
    description: Development server
  - url: https://api.chatbot.com
    description: Production server

paths:
  # Authentication endpoints
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user
      description: Get current authenticated user information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User information retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Chat endpoints
  /chat:
    post:
      tags:
        - Chat
      summary: Send chat message
      description: Send a message to the chatbot and get a response
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
      responses:
        '200':
          description: Chat response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatResponse'

  # Admin endpoints
  /admin/users:
    get:
      tags:
        - Admin
      summary: Get all users
      description: Get list of all users (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/users/{user_id}:
    put:
      tags:
        - Admin
      summary: Update user
      description: Update user information (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Knowledge Base endpoints
  /admin/knowledge-base/status:
    get:
      tags:
        - Knowledge Base
      summary: Get knowledge base status
      description: Get statistics about the knowledge base (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Knowledge base status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeBaseStatusResponse'

  /admin/knowledge-base/force-update:
    post:
      tags:
        - Knowledge Base
      summary: Force update website content
      description: Force re-scrape website with comprehensive crawling (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Website content updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateResponse'

  /admin/knowledge-base/crawl-website:
    post:
      tags:
        - Knowledge Base
      summary: Comprehensive website crawling
      description: Crawl entire website for comprehensive knowledge base setup (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Website crawling completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrawlResponse'

  /admin/knowledge-base/crawl-status:
    get:
      tags:
        - Knowledge Base
      summary: Get crawling status
      description: Get current crawling status and configuration (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Crawling status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrawlStatusResponse'

  /admin/knowledge-base/documents:
    get:
      tags:
        - Knowledge Base
      summary: Get indexed documents
      description: Get list of indexed documents in knowledge base (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of indexed documents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexedDocumentsResponse'

  /admin/knowledge-base/clear:
    delete:
      tags:
        - Knowledge Base
      summary: Clear knowledge base
      description: Clear all indexed documents from knowledge base (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Knowledge base cleared
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateResponse'

  # Website update endpoint
  /update-website:
    post:
      tags:
        - Knowledge Base
      summary: Update website content
      description: Update knowledge base by scraping the website
      responses:
        '200':
          description: Website content updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateResponse'

  # PDF upload endpoint
  /upload-pdf:
    post:
      tags:
        - Knowledge Base
      summary: Upload PDF
      description: Upload PDF document to knowledge base
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: PDF file to upload
      responses:
        '200':
          description: PDF uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateResponse'

  # WebSocket endpoints
  /ws/session/{session_id}:
    get:
      tags:
        - WebSocket
      summary: WebSocket connection for customer sessions
      description: WebSocket endpoint for real-time customer chat sessions
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '101':
          description: WebSocket connection established

  /ws/agent/{agent_id}:
    get:
      tags:
        - WebSocket
      summary: WebSocket connection for admin agents
      description: WebSocket endpoint for admin agents to handle escalated sessions
      parameters:
        - name: agent_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '101':
          description: WebSocket connection established

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Authentication schemas
    LoginRequest:
      type: object
      required:
        - email
        - password
        - role
      properties:
        email:
          type: string
          format: email
          description: User email address
        password:
          type: string
          description: User password
        role:
          type: string
          enum: [admin, employee]
          description: User role

    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token
        token_type:
          type: string
          example: bearer
        user:
          $ref: '#/components/schemas/UserResponse'

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          description: User ID
        email:
          type: string
          format: email
          description: User email
        username:
          type: string
          description: Username
        role:
          type: string
          enum: [admin, employee]
          description: User role
        is_active:
          type: boolean
          description: Whether user is active
        is_verified:
          type: boolean
          description: Whether user is verified
        created_at:
          type: string
          format: date-time
          description: User creation timestamp
        updated_at:
          type: string
          format: date-time
          description: User last update timestamp

    UserUpdate:
      type: object
      properties:
        email:
          type: string
          format: email
        username:
          type: string
        role:
          type: string
          enum: [admin, employee]
        is_active:
          type: boolean
        is_verified:
          type: boolean

    # Chat schemas
    ChatRequest:
      type: object
      required:
        - message
        - session_id
      properties:
        message:
          type: string
          description: User message
        session_id:
          type: string
          description: Chat session ID

    ChatResponse:
      type: object
      properties:
        reply:
          type: string
          description: Bot response
        escalated:
          type: boolean
          description: Whether conversation was escalated
        agent_id:
          type: string
          description: Agent ID if escalated
        confidence_score:
          type: number
          format: float
          description: Confidence score of the response
        session_id:
          type: string
          description: Chat session ID

    # Knowledge Base schemas
    KnowledgeBaseStatusResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          type: object
          properties:
            total_documents:
              type: integer
              description: Total number of indexed documents
            sources:
              type: object
              additionalProperties:
                type: integer
              description: Document count by source
            vector_db_path:
              type: string
              description: Path to vector database

    UpdateResponse:
      type: object
      properties:
        status:
          type: string
          enum: [success, error, updated, unchanged]
        message:
          type: string
          description: Response message
        hash:
          type: string
          description: Content hash (for updates)

    CrawlResponse:
      type: object
      properties:
        status:
          type: string
          enum: [success, error]
        message:
          type: string
          description: Response message
        pages_crawled:
          type: integer
          description: Number of pages crawled
        pages_indexed:
          type: integer
          description: Number of pages indexed
        crawl_timestamp:
          type: string
          format: date-time
          description: When crawling was completed

    CrawlStatusResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          type: object
          properties:
            website_url:
              type: string
              description: Website URL being crawled
            last_scraped_hash:
              type: string
              description: Hash of last scraped content
            total_documents:
              type: integer
              description: Total documents in knowledge base
            sources:
              type: object
              additionalProperties:
                type: integer
              description: Document count by source
            vector_db_path:
              type: string
              description: Path to vector database
            crawl_config:
              type: object
              properties:
                max_pages:
                  type: integer
                  description: Maximum pages to crawl
                delay_seconds:
                  type: number
                  format: float
                  description: Delay between requests
                allow_subdomains:
                  type: boolean
                  description: Whether to allow subdomains
                user_agent:
                  type: string
                  description: User agent string

    IndexedDocumentsResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: Document ID
              source:
                type: string
                description: Document source
              content_preview:
                type: string
                description: Preview of document content
              metadata:
                type: object
                description: Document metadata

    # Error schema
    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
          description: Error message
        detail:
          type: string
          description: Additional error details

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Chat
    description: Chat functionality and message handling
  - name: Admin
    description: Administrative functions and user management
  - name: Knowledge Base
    description: Knowledge base management and content indexing
  - name: WebSocket
    description: Real-time communication endpoints
